{
  "sections": [
    {
      "title": "Rules",
      "chats": [
        {
          "indexTitle": "Rules of this document",
          "question": "Rules of this document",
          "answer": "Put task in Tasks section.  \nTask should have template where fields should have values:  \nIndex Title: Task X.  \nQuestion: Task X.  Description of Task  \nAnswer: List of points where each point is a description and number of pomodoro done on task",
          "dateTime": "2024-01-03T10:08:44.441Z"
        },
        {
          "indexTitle": "Template to copy",
          "question": "Template to copy",
          "answer": "```json\nTask X.\n```\n```json\nTask X.  \nDescription\n```\n```json\n1. x    \n2. x  \n3. x  \n4. x  \n5. x  \n6. x  \n7. x  \n8. x  \n```",
          "dateTime": "2024-01-03T10:18:56.294Z"
        }
      ]
    },
    {
      "title": "Tasks",
      "chats": [
        {
          "indexTitle": "Task 30.",
          "question": "Task 30.  \nRefactor ECS of BouncingBall to unity style ECS",
          "answer": "1. Decide to do unity style ECS  \n2. Thinking how to do a unity style ECS (data in components, logic in systems)\n3. Implement ball wall in new way  \n4. Implement ball wall in new way  \n5. Implement ball wall in new way  \n6. Integrate systems with engine  \n7. Update entity to have new components; InsideWallsCollisionSystem introduced  \n8. Unity syle TransformComponent (later deleted)\n",
          "dateTime": "2024-01-03T10:04:02.861Z"
        },
        {
          "indexTitle": "Task 31.",
          "question": "Task 31.  \nCreate system able to load data to TransformComponent from json file (turned out to hard for now)\nInstead refactor MovementComponent   to data component and system",
          "answer": "1. Ponder what to do  \n2. Make notes and plan  \n3. Start refactor MovementComponent  \n4. Add system  \n5. Implementing system  \n6. Integrating with engine  \n7. Debuging bugs  \n8. Debuging bugs; commit  \n---\n9. KinematicsComponent refactor\n10. Above continued\n11. Nice refactor of KinematicsComponent  and adding of KinematicsSystem was done",
          "dateTime": "2024-01-03T10:11:38.501Z"
        },
        {
          "indexTitle": "Task 32.",
          "question": "Task 32.  \nRefactor CollisionComponent to ECS in style of unity.  \nComponent should be only data, simple public fields with default values at that.  \nCollisionSystem should be added, where collision logic resides and each entity with required components (data) can be registered to have that logic.  \nThere will be subsystems handling collision detection in here.",
          "answer": "1. Plan: Produce component with only data, produce system with logic. Include subsystems needed in system. Integrate it with engine. Test.  \n2. Work on system  \n3. Integrate system with engine\n4. Integrate system with game  \n5. Commit CollisionComponent refactor; lunch; unpause for refactor of LimitMoveComponent.  \n    First refactor InsideWallsCollisionSystem to SimpleCollisionSystem and InsideBoxCollisionSubSystem.  \n    Then LimitMoveComponent to component with data and LimitMoveSubSystem used in SimpleCollisionSystem  \n6. Continue 5\n7. Refactor SpriteComponent and RenderComponent to RenderSystem, SubSystems and data based components\n8. Continue 7  \n9. Finish with render system (first draft)  \n10. Commit, docs",
          "dateTime": "2024-01-03T19:45:07.670Z"
        },
        {
          "indexTitle": "Task 33.",
          "question": "Task 33.  \nGameStateComponent Refactor \nFor Component only with data and system for logic",
          "answer": "1. Try to use one RenderSystem instead of new one for evry entity and renderer    \n2.   \n3.   \n4. Refactor render systems, now only one system and subsystem registers all needed entities and renders  \n5.   \n6.   \n7.   \n8. GameStateComponent refactor, leved only data, moved logic to GameEventSystem and render to RenderSubSystem, tested, fixed bugs  \n",
          "dateTime": "2024-01-04T18:37:22.959Z"
        },
        {
          "indexTitle": "Task 34.",
          "question": "Task 34.",
          "answer": "StateComponent refactor  \nDone 8x pomodoros\nRemoving strings and replacing them with typed, kind of typed i guess, js objects  \nAdded StateSystem\n",
          "dateTime": "2024-01-05T23:51:49.805Z"
        },
        {
          "indexTitle": "Task 35.",
          "question": "Task 35.  \nJust refactor whatever component left\nComponent just data, logic to system",
          "answer": "1. MovementSubSystem refactor (data type fix, better data type)\n2. add unsubscribeInput, to input and to MovementSubSystem, add interface  \n3. MovementSystem unsubscribe  \n4. IFactory<T>, updated MovementSystem to store subsystems in manager,  \nto be able to unsubscribe input; it is ready to be extended  \n---\n* added 2,5 pomodoro refactored StepMovementComponent  \nRemoved it and added StepMovementSubSystem instead  \nSo i can switch beetween movement systems, this seem nice  \n---\n* 6 pomodoro  \nrefactored to use new component system  \nonly data in components, logic in systems",
          "dateTime": "2024-01-11T20:30:45.196Z"
        },
        {
          "indexTitle": "Task 36.",
          "question": "Task 36.",
          "answer": "Lets assume format for json  ",
          "dateTime": "2024-01-12T12:18:34.571Z"
        },
        {
          "indexTitle": "Task 37.",
          "question": "Task 37.",
          "answer": "1. fix, player can sore for rival team by scroring own gate  \n2. fix, score position  \n3. ball_game package to have one version for all platforms  \n4. sucked in to produce nice builders, iron out with chatgpt  \n---\n1. LocalGameBuilder\n2. draft of game builders that are more SRP",
          "dateTime": "2024-01-20T19:11:39.472Z"
        },
        {
          "indexTitle": "Task 38.",
          "question": "Task 38.  \nDownsize collision box, offset it, fix collision detection and handler",
          "answer": "1. Fixed collision and renderer of collision box with offset\n2. todo: vector math fix\n3. there is no way to fix player movement limiter, becouse current technology supports only one collision box  \n4. todo: add collision box id, add method to query by type and id, check what happens in query by type when multiple types are in data  \n5. As preparation to 4, removed not used logger in entity and set it in managers, removed name from component, added id to component  \n---\n1. Extended Entity to hold multiple instances of components, also used ClassType instead of string as key in map,  \nid of component is optionall in accesor methods, this aproach resulted in non braking changes, acctually tested, works  \n2. Introduced array of components to my ecs entity technology, drawed body and boots collision box  \n---\n1. Got collision with ball work for boots and limit move with body  \n2. Fixed limit move player",
          "dateTime": "2024-01-28T00:28:57.292Z"
        },
        {
          "indexTitle": "Task 39.",
          "question": "Task 39.  \nFix ball player collision  ",
          "answer": "1. failed, at state where i dont know what else to do with it,  \ni will add some new game machanic  ",
          "dateTime": "2024-01-30T12:03:01.596Z"
        },
        {
          "indexTitle": "Task 40.",
          "question": "Task 40.",
          "answer": "upgrade scripts installing packages from:\n```powershell\nparam (\n    [switch]$useFullList = $false\n)\n\n. \"C:\\atari-monk\\Code\\micro-engine\\script\\CommonFunctions.ps1\"\n\n$libFolder = \"engine_api\"\n$libName = \"engine_api\"\n$build = \"$libFolder\\build\\\"\n$pack = \"$libName-1.0.0.tgz\"\n$lib = $RepoPath + $build + $pack\n\n$defaultTargetProjects = @(\n  \"$RepoPath\\engine\\\",\n  \"$RepoPath\\ball_game\\\",\n  \"$RepoPath\\mobile_ball_game\\\"\n)\n\n$targetProjects = @(\n  \"$RepoPath\\engine\\\",\n  \"$RepoPath\\sketchbook\\\",\n  \"$RepoPath\\server\\\",\n  \"$RepoPath\\desktop_client\\\",\n  \"$RepoPath\\multi_desktop_client\\\",\n  \"$RepoPath\\mobile_ball_game\\\",\n  \"$RepoPath\\engine_node_tests\\\",\n  \"$RepoPath\\engine_jsdom_tests\\\"\n)\n\nif ($useFullList) {\n    $targetProjects = $fullTargetProjects\n} else {\n    $targetProjects = $defaultTargetProjects\n}\n\nBuild-Lib\nforeach ($targetProj in $targetProjects) {\n  Copy-And-Install-Pack -packPath $lib -projDir $targetProj -packName $pack\n}\n```\nto this\n```powershell\nparam (\n  [switch]$useFull = $false,\n  [switch]$useTest = $false\n)\n\n. \"C:\\atari-monk\\Code\\micro-engine\\script\\npm_Function_Lib.ps1\"\n\n$repoPath = \"C:\\atari-monk\\Code\\micro-engine\\\"\n$libFolder = \"engine_api\"\n$libName = \"engine_api\"\n$build = \"$libFolder\\build\\\"\n$pack = \"$libName-1.0.0.tgz\"\n$lib = Join-Path $repoPath ($build + $pack)\n\n$workingList = @(\n  \"engine\\\",\n  \"ball_game\\\",\n  \"mobile_ball_game\\\"\n)\n\n$fullList = @(\n  \"engine\\\",\n  \"ball_game\\\",\n  \"mobile_ball_game\\\",\n  \"sketchbook\\\",\n  \"desktop_client\\\",\n  \"server\\\",\n  \"multi_desktop_client\\\"\n)\n\n$testList = @(\n  \"engine_node_tests\\\",\n  \"engine_jsdom_tests\\\"\n)\n\n$targetProjects = if ($useTest) { $testList } elseif ($useFull) { $fullList } else { $workingList }\n$targetProjects = $targetProjects | ForEach-Object { Join-Path $repoPath $_ }\n\nWrite-Output (\"Using {0} list\" -f $(if ($useTest) { \"test\" } elseif ($useFull) { \"full\" } else { \"working\" }))\n\ntry {\nBuild-Lib\nif (-not (Check-Lib -libPath $lib)) {\n  return\n}\nforeach ($targetProj in $targetProjects) {\n  $copyParams = @{\n    packPath = $lib\n    projDir = $targetProj\n    packName = $pack\n  }\n  Write-Output $copyParams\n  Copy-And-Install-Pack @copyParams\n}\nWrite-Output \"Script execution completed successfully.\"\n} catch {\n    Write-Error \"An error occurred: $_\"\n}\n```\ndone for all projects\nruns with\n```json\n\"scripts\": {\n    \"build\": \"node ./script/copy-package.js && tsc\",\n    \"i-lib\": \"powershell.exe -ExecutionPolicy Bypass -File .\\\\script\\\\i-lib.ps1\",\n    \"i-lib-full\": \"powershell.exe -ExecutionPolicy Bypass -File .\\\\script\\\\i-lib.ps1 -useFull\",\n    \"i-lib-test\": \"powershell.exe -ExecutionPolicy Bypass -File .\\\\script\\\\i-lib.ps1 -useTest\"\n  },\n```\nTook 3,5 pomodoro\nBecouse i was hungry and it was so boring",
          "dateTime": "2024-01-30T13:44:14.848Z"
        },
        {
          "indexTitle": "Task 41",
          "question": "Task 41  \nIntroduce ball kicking feature",
          "answer": "* Prepare to kick ball  \n* refactor folder structure to this:\n```plaintext\nproj/\n|-- engine/\n|   |-- src/\n|       |-- ecs/\n|           |-- component/\n|           |-- entity/\n|           |-- system/\n|               |-- base/\n|                   |-- system1/\n|                       |-- System1Base.hpp\n|                       |-- subsystem/\n|                           |-- Subsystem1Base.hpp\n|                   |-- system2/\n|                       |-- System2Base.hpp\n|                       |-- subsystem/\n|                           |-- Subsystem2Base.hpp\n|               |-- impl/\n|                   |-- system1/\n|                       |-- subsystem/\n|                           |-- Subsystem1Impl1.hpp\n|                           |-- Subsystem1Impl2.hpp\n|                       |-- System1Impl1.hpp\n|                       |-- System1Impl2.hpp\n|                   |-- system2/\n|                       |-- subsystem/\n|                           |-- Subsystem2Impl1.hpp\n|                           |-- Subsystem2Impl2.hpp\n|                       |-- System2Impl1.hpp\n|                       |-- System2Impl2.hpp\n|-- game/\n|   |-- src/\n|       |-- main.cpp\n```",
          "dateTime": "2024-01-30T21:13:20.883Z"
        },
        {
          "indexTitle": "Task 42",
          "question": "Task 42  \nFix desktop version of ball game",
          "answer": "Fix desktop version of ball game  \nTook 3 pomodoros  \nText could not be fixed with data\n",
          "dateTime": "2024-01-31T19:19:11.594Z"
        },
        {
          "indexTitle": "Task 43",
          "question": "Task 43  \nProvide ability to map keys to system logic  \nHitting keys should invoke some console log in system logic",
          "answer": "* Preparation:  \n  1. State plan in doc micro_engine_flow_2024 for Task 43  \n  2. Create documentation files for code base parts that will be used or update it   \n* Plan:  \n  1. Should be executed in 3 pomodoros  \n  2. Make a draft of new class with chatgpt, refactor and integrate with existing code  \n  3. Test and ajust till working  \n  4. Notes in doc micro_engine_flow_2024 for Task 43\n\n",
          "dateTime": "2024-02-01T15:53:13.470Z"
        },
        {
          "indexTitle": "Task 48",
          "question": "Task 48  \nKickball with Z key.",
          "answer": "* Just create simple system, or modify existing ones.  \n  Probably sending event about z key to ball kinematics system.",
          "dateTime": "2024-02-08T11:53:52.780Z"
        },
        {
          "indexTitle": "Task 51",
          "question": "Task 51  \n* Direction Component  \n* Mouse input system  \n* Integration with PlayerKick ball",
          "answer": "Introduce Direction Component:  \n1. Create Direction Component class  \n2. Create MouseInput System class  \n3. Update entity_loader_v2 to include Direction  \n4. Add MouseInput to GameSystemBuilder  \n5. Add Direction Data to players in json\n6. Add rendering for Direction \n7. Test game  \n---\n\nMake Direction Component work:\n1. Integrated direction to kick\n2. Need to include distance from ball before kick works\n3. Refactor render system to use start from SystemBase or ManySystemBase  ",
          "dateTime": "2024-02-12T23:00:12.663Z"
        }
      ]
    }
  ]
}