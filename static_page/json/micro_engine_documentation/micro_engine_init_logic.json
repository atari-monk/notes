{
  "sections": [
    {
      "title": "Version 1",
      "chats": [
        {
          "indexTitle": "Description",
          "question": "Description",
          "answer": "* Named InitLogicSystem\n* System part of Entity Component System in game engine  \n* Api for specific type of system base \n* Preforms initialization tasks on registered entities  \n* Used as base in initialization systems  \n  invoked after entities are created from data   \n  and need initialization and integration with engine \n",
          "dateTime": "2024-02-01T15:20:19.728Z"
        },
        {
          "indexTitle": "File Structure",
          "question": "File Structure",
          "answer": "```plaintext\n|-- engine/\n|   |-- src/\n|       |-- ecs/\n|           |-- component/\n|           |-- entity/\n|           |-- system/\n|               |-- base/\n|                   |-- init_logic/\n|                       |-- IInitLogicSystem.ts\n|                       |-- IInitLogicSystemManager.ts\n|                       |-- InitLogicSystemBase.ts\n|                       |-- InitLogicSystemManager.ts\n```\n",
          "dateTime": "2024-02-01T15:06:02.741Z"
        },
        {
          "indexTitle": "IInitLogicSystem",
          "question": "IInitLogicSystem",
          "answer": "```typescript\nexport default interface IRegisterEntityByName {\n  registerEntityByName(name: string): void\n}\n```\n```typescript\nimport IRegisterEntityByName from '../IRegisterEntityByName'\n\nexport default interface IInitLogicSystem extends IRegisterEntityByName {\n  init(): void\n}\n```\n* System Api",
          "dateTime": "2024-02-01T15:30:06.452Z"
        },
        {
          "indexTitle": "IInitLogicSystemManager",
          "question": "IInitLogicSystemManager",
          "answer": "```typescript\nimport { IManager } from 'engine_api'\nimport IInitLogicSystem from './IInitLogicSystem'\n\nexport default interface IInitLogicSystemManager\n  extends IManager<IInitLogicSystem> {\n  init(): void\n}\n```\n* Systems container api",
          "dateTime": "2024-02-01T15:29:34.364Z"
        },
        {
          "indexTitle": "InitLogicSystemBase",
          "question": "InitLogicSystemBase",
          "answer": "```typescript\nimport { IEntity, IEntityManager } from 'engine_api'\nimport IInitLogicSystem from './IInitLogicSystem'\n\nexport default abstract class InitLogicSystemBase implements IInitLogicSystem {\n  protected _entityList: IEntity[] = []\n\n  constructor(protected readonly _entityManager: IEntityManager) {}\n\n  init(): void {\n    this.iterateEntities((entity) => this.initLogic(entity))\n  }\n\n  private iterateEntities(callback: (entity: IEntity) => void): void {\n    for (const entity of this._entityList) {\n      callback(entity)\n    }\n  }\n\n  abstract initLogic(entity: IEntity): void\n\n  registerEntityByName(name: string): void {\n    this._entityList.push(this._entityManager.getStrict(name))\n  }\n}\n```\n* Base class  \n* Stores registered entities  \n* Preforms init logic on them  \n* Child classes must override initLogic method   \n  to define their init logic and run it on each registered entity",
          "dateTime": "2024-02-01T15:39:55.647Z"
        },
        {
          "indexTitle": "InitLogicSystemManager",
          "question": "InitLogicSystemManager",
          "answer": "```typescript\nimport MapManager from '../../../../tech/entity_component/MapManager'\nimport IInitLogicSystem from './IInitLogicSystem'\nimport IInitLogicSystemManager from './IInitLogicSystemManager'\n\nexport default class InitLogicSystemManager\n  extends MapManager<IInitLogicSystem>\n  implements IInitLogicSystemManager\n{\n  init(): void {\n    for (const system of this.values()) {\n      system.init()\n    }\n  }\n}\n```\n* Init systems container  \n* Stores evry init system in engine  \n* Runs all of them",
          "dateTime": "2024-02-01T15:38:00.772Z"
        }
      ]
    }
  ]
}